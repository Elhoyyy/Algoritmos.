TITULO:
Algoritmos Práctica 2
AUTOR 1: Eloy Sastre Sobrino LOGIN 1: eloy.sastre
AUTOR 2: Daniel Pérez Mosquera LOGIN 2: daniel.pmosquera
GROUP: 1.1
DATE: 20/10/2022

En esta práctica estudiaremos el tiempo de ejecución y realizaremos una comprabación empírica
de la complejidad teórica de dos algoritmos cuya función es ordenar ascendentemente un vector. 
Usando en el algoritmo de ordenación rápida distintos umbrales.

Características de la maquina:
Los tiempos de ejecución resultantes de los algoritmos fueron realizados en el dispositivo con las siguientes características:

-Procesador: AMD Ryzen 7 5800H with Radeon Graphics 3.20 GHz. (16 CPUS)

-Memoria RAM de 16Gb.

-Version 22.04.1 de 64 bits de Ubuntu.

-Kernel: 5.15.0-47-generic

Creamos la función test para comprobar que ambos algoritmos funcionan correctamente y poder medir el tiempo de ejecución
correctamente, como se puede observar tanto en la ordenación por inserción como en la ordenaicón rapida para el vector 
con inicialización descendente utilizamos 10 elementos y para el de inicialización aleatoria utilizamos 17 elementos. 
A continuacion ponemos un ejemplo de lo que nos imprime una ejecución del test por ordenación por inserción y ordenación rápida:

Ordenacion por insercion con inicializacion descendente: 
 10  9  8  7  6  5  4  3  2  1 
Vector ordenado: 
 1  2  3  4  5  6  7  8  9  10 

Ordenacion por insercion con inicializacion aleatoria:
 -9  -6  -15  -12  -9  -7  14  -15  12  14  -15  -5  3  -13  -4  4  -7 
Vector ordenado.
  -15  -15  -15  -13  -12  -9  -9  -7  -7  -6  -5  -4  3  4  12  14  14 


Ordenacion rapida con inicializacion descendente: 
 1  2  3  4  5  6  7  8  9  10 
Vector ordenado: 
 1  2  3  4  5  6  7  8  9  10 

Ordenacion rapida con inicializacion aleatoria:
 -15  -12  -5  -4  5  -12  2  -10  0  16  7  -15  -9  4  -1  -15  12 
Vector ordenado.
  -15  -15  -15  -12  -12  -10  -9  -5  -4  -1  0  2  4  5  7  12  16 
  
Verificación empírica: 

En este apartado calcularemos el tiempo de ejecución de los dos algoritmos comentados anteriormente  y 
gracias a las tablas que proporcionamos con los distintos tiempos de ejecución de cada cota, realizaremos 
una comprobación empírica de la complejidad haciendo uso de la cota sobreestimada, ajustada y subestimada.

Los tiempos están medidos en microsegundos.

En el caso de los tiempos fueran menores de 500 milisegundos se ejecutó (para
la variable n) la función 1000 veces y asi la suma del tiempo de las iteraciones es mayor de 500 microsegundos, siendo el tiempo representado la media del tiempo de ejecución, marcando dichos tiempos con un asterisco (*) a la izquierda de las iteraciones.

También realizaremos con los datos de las tablas de ordenación rápida una comparación de los distintos tiempos de ejecución para
los valores de Umbral 1, 10 y 100 especificando cuál es el mejor para las distintas inicializaciones del vector.

TABLAS DE ORDENACIÓN POR INSERCIÓN:
INICIALIZACIÓN ALEATORIA:

	      n	        t(n)	    t(n)/f(n)	   t(n)/g(n)	  t(n)/h(n)	
(*)         500        119.321       0.001654       0.000477       0.000138
(*)        1000        464.991       0.001851       0.000465       0.000117
           2000       1818.000       0.002078       0.000454       0.000099
           4000       7256.000       0.002382       0.000454       0.000086
           8000      29136.000       0.002747       0.000455       0.000075
          16000     117698.000       0.003187       0.000460       0.000066
          32000     491031.000       0.003818       0.000480       0.000060
          
Donde:
n es el número de interaciones que realiza el bucle. (Es en las demás funciones igual)
t(n)= es el tiempo de ejecución en microsegundos(µs) (Es en las demás funciones igual)
 Cota subestimada: f(n) = n^1.8.
 Cota ajustada:  g(n) = n^2. La cual tiene una constante que tiende a 0.00046
 Cota sobreestimada: h(n) = n^2.2.
	
 ASCENDENTE:
 
 	    n	          t(n)	     t(n)/f(n)	    t(n)/g(n)	   t(n)/h(n)	
(*)         500          1.002       0.006945       0.002004       0.000578
(*)        1000          1.985       0.007902       0.001985       0.000499
(*)        2000          3.826       0.008748       0.001913       0.000418
(*)        4000          7.910       0.010388       0.001978       0.000376
(*)        8000         15.816       0.011930       0.001977       0.000328
(*)       16000         31.456       0.013627       0.001966       0.000284
(*)       32000         65.121       0.016203       0.002035       0.000256

Donde:
Cota subestimada: f(n) = n ^ 0.8.
Cota ajustada:  g(n) = n ^ 1. Cuya constante se aproxima a 0.0019.
Cota sobreestimada: h(n) = n ^ 1.2.


DESCENDENTE:
	 
 	    n	          t(n)	     t(n)/f(n)	    t(n)/g(n)	   t(n)/h(n)	
(*)         500        167.891       0.002327       0.000672       0.000194
           1000        674.000       0.002683       0.000674       0.000169
           2000       2719.000       0.003109       0.000680       0.000149
           4000      10647.000       0.003496       0.000665       0.000127
           8000      42917.000       0.004046       0.000671       0.000111
          16000     170192.000       0.004608       0.000665       0.000096
          32000     709420.000       0.005516       0.000693       0.000087
 
 Donde:
 Cota subestimada: f(n) = n^1.8.
 Cota ajustada:  g(n) = n^2. La cual tiene una constante que tiende 0.00067 (aunque el último valor se podría considerar una anomalía
 ya que hace un salto más grande a diferencia de los demás).
 Cota sobreestimada: h(n) = n^2.2.
 
 
 
 TABLAS DE ORDENACIÓN RÁPIDA:
 PARA UMBRAL 1:
 
 ALEATORIO:
 
 	    n	          t(n)	     t(n)/f(n)	    t(n)/g(n)	   t(n)/h(n)	
(*)         500         39.224       0.078448       0.042139       0.022635
(*)        1000         84.989       0.084989       0.042595       0.021348
(*)        2000        182.646       0.091323       0.042705       0.019970
(*)        4000        393.055       0.098264       0.042873       0.018706
           8000        838.000       0.104750       0.042643       0.017359
          16000       1782.000       0.111375       0.042303       0.016068
          32000       3793.000       0.118531       0.042007       0.014887
          
 Donde:
 Cota subestimada: f(n) = n^1.
 Cota ajustada:  g(n) = n^1.1. La cual tiene una constante que tiende a 0.042
 Cota sobreestimada: h(n) = n^1.2.
          
          
DESCENDENTE:        
 	    n	          t(n)	     t(n)/f(n)	    t(n)/g(n)	   t(n)/h(n)	
(*)         500         20.455       0.076160       0.029983       0.011804
(*)        1000         42.222       0.084244       0.029891       0.010606
(*)        2000         88.095       0.094194       0.030121       0.009632
(*)        4000        181.278       0.103870       0.029935       0.008627
(*)        8000        370.936       0.113898       0.029584       0.007684
          16000        764.000       0.125715       0.029428       0.006889
          32000       1602.000       0.141263       0.029803       0.006288
          
 Donde:
 Cota subestimada: f(n)=n^0.9.
 Cota ajustada:  g(n) = n^1.04. Siendo su constante, aproximadamente, 0.029
 Cota sobreestimada: h(n) = n^1.2.        
 
 
ASCENDENTE:          
 	    n	          t(n)	     t(n)/f(n)	    t(n)/g(n)	   t(n)/h(n)	
(*)         500         21.844       0.081332       0.034072       0.012606
(*)        1000         44.649       0.089086       0.033870       0.011215
(*)        2000         91.386       0.097713       0.033714       0.009992
(*)        4000        188.127       0.107795       0.033753       0.008953
(*)        8000        388.978       0.119438       0.033940       0.008058
          16000        799.000       0.131474       0.033905       0.007204
          32000       1631.000       0.143820       0.033659       0.006401
          
Donde:
Cota subestimada: f(n) = n^0.9.
Cota ajustada:  g(n) = n^1.05. Cuya constante se aproxima a 0.033.
Cota sobreestimada: h(n) =  n ^ 1.2.        

PARA UMBRAL 10:

ALEATORIO:

	      n	        t(n)	    t(n)/f(n)	   t(n)/g(n)	  t(n)/h(n)	
(*)         500         30.375       0.060750       0.027082       0.012847
(*)        1000         67.291       0.067291       0.027413       0.011966
(*)        2000        147.666       0.073833       0.027486       0.011041
(*)        4000        321.641       0.080410       0.027355       0.010111
           8000        711.000       0.088875       0.027630       0.009397
          16000       1546.000       0.096625       0.027451       0.008591
          32000       3313.000       0.103531       0.026878       0.007741
	  
 Donde:
Cota subestimada: f(n) = n.
Cota ajustada:  g(n) = n^1.13. Cuya constante se aproxima a 0.027.
Cota sobreestimada: h(n) =  n ^ 1.25. 

ASCENDENTE:


	      n	        t(n)	    t(n)/f(n)	   t(n)/g(n)	  t(n)/h(n)	
(*)         500          9.558       0.021646       0.011627       0.005516
(*)        1000         20.489       0.023525       0.011790       0.005147
(*)        2000         43.677       0.025424       0.011889       0.004775
(*)        4000         92.634       0.027337       0.011927       0.004409
(*)        8000        196.711       0.029431       0.011981       0.004075
(*)       16000        414.350       0.031429       0.011938       0.003736
          32000        877.000       0.033725       0.011952       0.003442
	  
   Donde:
Cota subestimada: f(n) = n^0.98.
Cota ajustada:  g(n) = n^1.08.Cuya constante se aproxima a 0.011.
Cota sobreestimada: h(n) =  n ^ 1.2. 


DESCENDENTE:

	      n	         t(n)	    t(n)/f(n)	   t(n)/g(n)	  t(n)/h(n)	
(*)         500         12.312       0.024624       0.014978       0.007105
(*)        1000         25.723       0.025723       0.014802       0.006461
(*)        2000         53.681       0.026840       0.014612       0.005869
(*)        4000        112.077       0.028019       0.014431       0.005334
(*)        8000        238.092       0.029762       0.014501       0.004932
(*)       16000        499.059       0.031191       0.014378       0.004500
          32000       1059.000       0.033094       0.014432       0.004156
	  
    Donde:
Cota subestimada: f(n) = n.
Cota ajustada:  g(n) = n^1.08.Cuya constante se aproxima a 0.014.
Cota sobreestimada: h(n) =  n ^ 1.2.

PARA UMBRAL 100:

ALEATORIO:

	      n	        t(n)	    t(n)/f(n)	   t(n)/g(n)	  t(n)/h(n)	
(*)         500         30.860       0.061720       0.029279       0.013052
(*)        1000         68.237       0.068237       0.029787       0.012134
(*)        2000        149.836       0.074918       0.030093       0.011203
(*)        4000        326.585       0.081646       0.030178       0.010266
           8000        705.000       0.088125       0.029973       0.009318
          16000       1552.000       0.097000       0.030358       0.008625
          32000       3345.000       0.104531       0.030104       0.007816
     Donde:
Cota subestimada: f(n) = n.
Cota ajustada:  g(n) = n^1.18.Cuya constante se aproxima a 0.030.
Cota sobreestimada: h(n) =  n ^ 1.25.

ASCENDENTE:

	      n	        t(n)	    t(n)/f(n)	   t(n)/g(n)	  t(n)/h(n)	
(*)         500          3.742       0.007484       0.002522       0.001583
(*)        1000          8.789       0.008789       0.002624       0.001563
(*)        2000         20.269       0.010134       0.002680       0.001515
(*)        4000         45.712       0.011428       0.002677       0.001437
(*)        8000        102.098       0.012762       0.002648       0.001349
(*)       16000        225.717       0.014107       0.002593       0.001254
(*)       32000        495.154       0.015474       0.002519       0.001157

     Donde:
Cota subestimada: f(n) = n.
Cota ajustada:  g(n) = n^1.175.Cuya constante se aproxima a 0.026 y se puede observar una pequeña anomalía tanto en la iteración 500 y 32000 
ya que son las que más salto pegan con respecto a los demás datos de esta cota.
Cota sobreestimada: h(n) =  n ^ 1.25.

DESCENDENTE:

	      n	         t(n)	    t(n)/f(n)	   t(n)/g(n)	  t(n)/h(n)	
(*)         500          7.478       0.027843       0.010301       0.004315
(*)        1000         14.503       0.028937       0.009582       0.003643
(*)        2000         29.720       0.031778       0.009418       0.003249
(*)        4000         65.059       0.037278       0.009888       0.003096
(*)        8000        133.491       0.040989       0.009731       0.002765
(*)       16000        286.293       0.047109       0.010010       0.002581
          32000        616.000       0.054318       0.010331       0.002418
	  
  Donde:
  Cota subestima f(n)= n ^ 0.9.
  Cota ajustada g(n)= n ^ 1.06. Tendiendo a 0.010.
  Cota sobrestimada h(n)= n ^ 1.2.

A partir de estos datos y de la lógica del algoritmo de ordenacion rápida podemos afirmar:

Para la inicializacion ascendete del vector el mejor umbral es 100 porque cuanto mayor sea el valor de umbral,
el algoritmo de ordenacion rápida va a devolver antes el vector, llamando antes al algoritmo de ordenacion por inserción,
el cual es más rapido que ordenación rápida en el caso ascendente. 

Para la inicialización descendente del vector el mejor umbral es también 100 porque ordenación rápida va cambiando a pares los
elementos del vector, por ejemplo cambia el primer elemento por el ultimo, el segundo con el penultimo... 
por lo tanto cuanto mayor sea el umbral mas cambios de pares puede hacer en el bucle sin tener que hacer la llamada recursiva.

Para la inicalización aleatorio del vector el mejor umbral es 10 porque en el caso de que el umbral fuera 100, la ordenación por inserción
recibiría un vector de gran tamaño siendo el algoritmo de ordenación 
