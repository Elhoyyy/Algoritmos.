
TITULO:
Algoritmos Práctica 4
AUTOR 1: Eloy Sastre Sobrino LOGIN 1: eloy.sastre
AUTOR 2: Daniel Pérez Mosquera LOGIN 2: daniel.pmosquera
GROUP: 1.1
DATE: 20/11/2022

INTRODUCCIÓN:
En esta práctica estudiaremos el tiempo de ejecución y realizaremos una comprabación empírica
de la complejidad teórica de un algoritmo de ordenacion de montículos en tres casos distintos, cuando su inicializacion es ascendentes,descendente y aleatorio.

Caracteristicas de la maquina:
Los tiempos de ejecución resultantes de los algoritmos fueron realizados en el dispositivo con las siguientes características:

-Procesador: AMD Ryzen 7 5800H with Radeon Graphics 3.20 GHz. (16 CPUS)

-Memoria RAM de 16Gb.

-Version 22.04.1 de 64 bits de Ubuntu.

-Kernel: 5.15.0-47-generic

Creamos la funcion test para comprobar que se crea el monticulo y se ordena de forma correcta para cualquier inicializacion, ascendente,descendente y aleatoria.

TEST:

ORDENACION DE MONTICULO CON INICIALIZACION ALEATORIA:
 5  -6  7  -14  -10  -8  15  -10  -13  6  14  11  2  12  -2
Vector ordenado.
 -14  -13  -10  -10  -8  -6  -2  2  5  6  7  11  12  14  15
ORDENACION DE MONTICULO CON INICIALIZACION ASCENDENTE:
 0  1  2  3  4  5  6  7  8  9  10  11  12  13  14
Vector ordenado.
 0  1  2  3  4  5  6  7  8  9  10  11  12  13  14
ORDENACION DE MONTICULO CON INICIALIZACION DESCENDENTE:
 15  14  13  12  11  10  9  8  7  6  5  4  3  2  1
Vector ordenado.
 1  2  3  4  5  6  7  8  9  10  11  12  13  14  15
 
 En este apartado calcularemos el tiempo de creacion de monticulo de forma ascendente de tamaño n y gracias a la tabla podemos confirmar que la que la cota
 ajustada es igual a la cota teórica: n^1.
 
 
Los tiempos están medidos en microsegundos.

En el caso de los tiempos fueran menores de 500 milisegundos se ejecutó (para
la variable n) la función 1000 veces y asi la suma del tiempo de las iteraciones es mayor de 500 microsegundos, siendo el tiempo representado la media del tiempo de ejecución, marcando dichos tiempos con un asterisco (*) a la izquierda de las iteraciones.

 
 TABLAS:
 
 CREAR MONTICULO CON VECTOR ASCENDENTE:

	      n	        t(n)	    t(n)/f(n)	   t(n)/g(n)	  t(n)/h(n)	
(*)        8000         51.772       0.039050       0.006471       0.001072
(*)       16000         98.500       0.042672       0.006156       0.000888
(*)       32000        201.163       0.050053       0.006286       0.000790
(*)       64000        407.784       0.058276       0.006372       0.000697
         128000        801.000       0.065745       0.006258       0.000596
         256000       1526.000       0.071939       0.005961       0.000494
         512000       3407.000       0.092248       0.006654       0.000480
	 
n es el número de interaciones que realiza de la función.
t(n)= es el tiempo de ejecución en microsegundos(µs) (Es en las demás funciones igual)
 Cota subestimada: f(n) = n^0.8.
 Cota ajustada:  g(n) = n^1. La cual tiene una constante que tiende a 0.0061/0.0063, incluyendo una anomalía con el valor de n=512000 ya que se produce
 un gran salto con respecto a los demás tiempos.
 Cota sobreestimada: h(n) = n^1.2.


Ahora calcularemos calcularemos el timepo de ejecución de la ordenacion de montículos ya sea inicializacion ascendente, descendente y aleatoria. Y a partir de los
tiempos obtenidos mostramos en estas tablas las cotas ajustadas,sobrestimadas y subestimadas para cada inicializacion.
 
 ALEATORIA:
 
 	    n	          t(n)	     t(n)/f(n)      t(n)/g(n)	   t(n)/h(n)	
(*)        2000        198.658       0.099329       0.046449       0.021721
(*)        4000        421.821       0.105455       0.046011       0.020075
           8000        936.000       0.117000       0.047630       0.019390
          16000       1996.000       0.124750       0.047384       0.017998
          32000       4113.000       0.128531       0.045551       0.016143
          64000       8691.000       0.135797       0.044903       0.014848
         128000      18804.000       0.146906       0.045323       0.013983
	 
Donde:

 Cota subestimada: f(n) = n^1.
 Cota ajustada:  g(n) = n^1.09. La cual tiene una constante que tiende a 0.045-0.047.
 Cota sobreestimada: h(n) = n^1.2.



DESCENDENTE:


	      n	        t(n)	    t(n)/f(n)	   t(n)/g(n)	  t(n)/h(n)	
(*)        2000        141.929       0.070964       0.038633       0.015518
(*)        4000        309.892       0.077473       0.039901       0.014748
           8000        681.000       0.085125       0.041477       0.014107
          16000       1343.000       0.083937       0.038692       0.012110
          32000       2765.000       0.086406       0.037682       0.010852
          64000       6004.000       0.093812       0.038705       0.010257
         128000      13081.000       0.102195       0.039889       0.009727

Donde:

 Cota subestimada: f(n) = n^1.
 Cota ajustada:  g(n) = n^1.08. La cual tiene una constante que tiende a 0.038 con una anomalía con el valor n = 8000 ya que 
 se observa un gran salto con respecto a los demás tiempos.
 Cota sobreestimada: h(n) = n^1.2.



ASCENDENTE: 

	      n	        t(n)	    t(n)/f(n)	   t(n)/g(n)	  t(n)/h(n)	
(*)        2000        141.654       0.323895       0.009318       0.015488
(*)        4000        311.519       0.409107       0.009390       0.014826
           8000        682.000       0.514414       0.009486       0.014128
          16000       1353.000       0.586141       0.008735       0.012200
          32000       3096.000       0.770337       0.009327       0.012151
          64000       6492.000       0.927758       0.009166       0.011091
         128000      13016.000       1.068340       0.008647       0.009679

	 
Donde:

 Cota subestimada: f(n) = n^0.8.
 Cota ajustada:  g(n) = / n* log ( n) ) . La cual tiene una constante que tiende a 0.009. También se observa una anomalía en el útlimo valor impreso
 por pantalla.
 Cota sobreestimada: h(n) = n^1.2.


Conclusión:
Podemos afirmar que la mejor inicializacion es la descendente seguida de la aleatoria y por último la ascendente. Siendo la cota obtenida menor, en los casos de
descendete y aleatorio, que la cota teórica n*log(n) y en el caso de inicializacion ascendente siendo la cota obtenida igual a la teórica. 

Comparandolo con la ordenación por inserción, la ordenacion por montículos es mas rápida para la inicialización descendente y aleatoria, cota n^2,
pero en la inicializacion ascendente, con cota n^1, es más rápida ordenacion por inserción.

Comparandolo con la ordenación rápida, para cualquier umbral, la ordenación rápida tiene menor tiempo de ejecución que la ordenación por monticulos.


